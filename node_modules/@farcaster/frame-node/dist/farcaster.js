"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVerifyAppKeyWithHub = exports.signedKeyRequestAbi = void 0;
const AbiParameters = __importStar(require("ox/AbiParameters"));
const zod_1 = require("zod");
const types_1 = require("./types");
exports.signedKeyRequestAbi = [
    {
        components: [
            {
                name: 'requestFid',
                type: 'uint256',
            },
            {
                name: 'requestSigner',
                type: 'address',
            },
            {
                name: 'signature',
                type: 'bytes',
            },
            {
                name: 'deadline',
                type: 'uint256',
            },
        ],
        name: 'SignedKeyRequest',
        type: 'tuple',
    },
];
const hubResponseSchema = zod_1.z.object({
    events: zod_1.z.array(zod_1.z.object({
        signerEventBody: zod_1.z.object({
            key: zod_1.z.string(),
            metadata: zod_1.z.string(),
        }),
    })),
});
const createVerifyAppKeyWithHub = (hubUrl, requestOptions) => async (fid, appKey) => {
    const url = new URL('/v1/onChainSignersByFid', hubUrl);
    url.searchParams.append('fid', fid.toString());
    const response = await fetch(url, requestOptions);
    if (response.status !== 200) {
        throw new types_1.BaseError(`Non-200 response received: ${await response.text()}`);
    }
    const responseJson = await response.json();
    const parsedResponse = hubResponseSchema.safeParse(responseJson);
    if (parsedResponse.error) {
        throw new types_1.BaseError('Error parsing Hub response', parsedResponse.error);
    }
    const appKeyLower = appKey.toLowerCase();
    const signerEvent = parsedResponse.data.events.find((event) => event.signerEventBody.key.toLowerCase() === appKeyLower);
    if (!signerEvent) {
        return { valid: false };
    }
    const decoded = AbiParameters.decode(exports.signedKeyRequestAbi, Buffer.from(signerEvent.signerEventBody.metadata, 'base64'));
    if (decoded.length !== 1) {
        throw new types_1.BaseError('Error decoding metadata');
    }
    const appFid = Number(decoded[0].requestFid);
    return { valid: true, appFid };
};
exports.createVerifyAppKeyWithHub = createVerifyAppKeyWithHub;
