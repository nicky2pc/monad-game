"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidEventDataError = void 0;
exports.parseWebhookEvent = parseWebhookEvent;
const frame_core_1 = require("@farcaster/frame-core");
const jfs_1 = require("./jfs");
const types_1 = require("./types");
class InvalidEventDataError extends types_1.BaseError {
    name = 'VerifyJsonFarcasterSignature.InvalidEventDataError';
}
exports.InvalidEventDataError = InvalidEventDataError;
async function parseWebhookEvent(rawData, verifyAppKey) {
    const { fid, appFid, payload } = await (0, jfs_1.verifyJsonFarcasterSignature)(rawData, verifyAppKey);
    // Pase and validate event payload
    let payloadJson;
    try {
        payloadJson = JSON.parse(Buffer.from(payload).toString('utf-8'));
    }
    catch (error) {
        throw new InvalidEventDataError('Error decoding and parsing payload', error instanceof Error ? error : undefined);
    }
    const event = frame_core_1.serverEventSchema.safeParse(payloadJson);
    if (event.success === false) {
        throw new InvalidEventDataError('Invalid event payload', event.error);
    }
    return { fid, appFid, event: event.data };
}
