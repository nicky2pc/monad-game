import {
  z
} from "./chunk-7TTLHRTU.js";
import {
  import_index
} from "./chunk-6VWO3YVD.js";
import {
  __export,
  __publicField
} from "./chunk-OS7ZSSJM.js";

// node_modules/@farcaster/frame-core/esm/actions/AddFrame.js
var AddFrame_exports = {};
__export(AddFrame_exports, {
  InvalidDomainManifest: () => InvalidDomainManifest,
  RejectedByUser: () => RejectedByUser
});

// node_modules/@farcaster/frame-core/esm/errors.js
var errors_exports = {};
__export(errors_exports, {
  BaseError: () => BaseError
});
var BaseError = class extends Error {
  constructor(message, options = {}) {
    super(message, options.cause ? { cause: options.cause } : void 0);
    __publicField(this, "name", "BaseError");
    __publicField(this, "cause");
    this.cause = options.cause;
  }
};

// node_modules/@farcaster/frame-core/esm/actions/AddFrame.js
var InvalidDomainManifest = class extends BaseError {
  constructor() {
    super("Invalid domain manifest");
    __publicField(this, "name", "AddFrame.InvalidDomainManifest");
  }
};
var RejectedByUser = class extends BaseError {
  constructor() {
    super("Add frame rejected by user");
    __publicField(this, "name", "AddFrame.RejectedByUser");
  }
};

// node_modules/@farcaster/frame-core/esm/actions/ComposeCast.js
var ComposeCast_exports = {};

// node_modules/@farcaster/frame-core/esm/actions/Ready.js
var Ready_exports = {};
__export(Ready_exports, {
  DEFAULT_READY_OPTIONS: () => DEFAULT_READY_OPTIONS
});
var DEFAULT_READY_OPTIONS = {
  disableNativeGestures: false
};

// node_modules/@farcaster/frame-core/esm/actions/SignIn.js
var SignIn_exports = {};
__export(SignIn_exports, {
  RejectedByUser: () => RejectedByUser2
});
var RejectedByUser2 = class extends BaseError {
  constructor() {
    super("Sign in rejected by user");
    __publicField(this, "name", "SignIn.RejectedByUser");
  }
};

// node_modules/@farcaster/frame-core/esm/actions/Swap.js
var Swap_exports = {};

// node_modules/@farcaster/frame-core/esm/actions/ViewProfile.js
var ViewProfile_exports = {};

// node_modules/@farcaster/frame-core/esm/actions/ViewToken.js
var ViewToken_exports = {};

// node_modules/@farcaster/frame-core/esm/wallet/ethereum.js
var ethereum_exports = {};

// node_modules/@farcaster/frame-core/esm/context.js
var context_exports = {};

// node_modules/@farcaster/frame-core/esm/manifest.js
var manifest_exports = {};

// node_modules/@farcaster/frame-core/esm/schemas/shared.js
var SPECIAL_CHARS_PATTERN = /[@#$%^&*+=\/\\|~«»]/;
var REPEATED_PUNCTUATION_PATTERN = /(!{2,}|\?{2,}|-{2,})/;
var EMOJI_PATTERN = /[\u{1F300}-\u{1F9FF}]|[\u{2702}-\u{27B0}]|[\u{2600}-\u{26FF}]|[\u{2B00}-\u{2BFF}]/u;
var createSimpleStringSchema = ({ max, noSpaces } = {}) => {
  const stringValidations = noSpaces ? z.string().max(max ?? Number.POSITIVE_INFINITY).regex(/^\S*$/, "Spaces are not allowed") : z.string().max(max ?? Number.POSITIVE_INFINITY);
  return stringValidations.refine((value) => !EMOJI_PATTERN.test(value), {
    message: "Emojis and symbols are not allowed"
  }).refine((value) => !SPECIAL_CHARS_PATTERN.test(value), {
    message: "Special characters (@, #, $, %, ^, &, *, +, =, /, \\, |, ~, «, ») are not allowed"
  }).refine((value) => !REPEATED_PUNCTUATION_PATTERN.test(value), {
    message: "Repeated punctuations (!!, ??, --) are not allowed"
  });
};
var secureUrlSchema = z.string().url().startsWith("https://", { message: "Must be an https url" }).max(1024);
var frameNameSchema = z.string().max(32);
var buttonTitleSchema = z.string().max(32);
var CAIP_19_REGEX = /^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}\/(?:[-a-z0-9]{3,8}:[-.%a-zA-Z0-9]{1,128}(?:\/[-.%a-zA-Z0-9]{1,78})?|native)$/;
var caip19TokenSchema = z.string().regex(CAIP_19_REGEX, { message: "Invalid CAIP-19 asset ID" });
var hexColorSchema = z.string().regex(/^#([0-9A-F]{3}|[0-9A-F]{6})$/i, {
  message: "Invalid hex color code. It should be in the format #RRGGBB or #RGB."
});
var aspectRatioSchema = z.union([z.literal("1:1"), z.literal("3:2")]);
var encodedJsonFarcasterSignatureSchema = z.object({
  header: z.string(),
  payload: z.string(),
  signature: z.string()
});
var jsonFarcasterSignatureHeaderSchema = z.object({
  fid: z.number(),
  type: z.literal("app_key"),
  key: z.string().startsWith("0x")
});

// node_modules/@farcaster/frame-core/esm/schemas/embeds.js
var actionLaunchFrameSchema = z.object({
  type: z.literal("launch_frame"),
  name: frameNameSchema,
  url: secureUrlSchema.optional(),
  splashImageUrl: secureUrlSchema.optional(),
  splashBackgroundColor: hexColorSchema.optional()
});
var actionViewTokenSchema = z.object({
  type: z.literal("view_token"),
  token: caip19TokenSchema
});
var actionSchema = z.discriminatedUnion("type", [
  actionLaunchFrameSchema,
  actionViewTokenSchema
]);
var buttonSchema = z.object({
  title: buttonTitleSchema,
  action: actionSchema
});
var frameEmbedNextSchema = z.object({
  version: z.literal("next"),
  imageUrl: secureUrlSchema,
  aspectRatio: aspectRatioSchema.optional(),
  button: buttonSchema
});
var safeParseFrameEmbed = (rawResponse) => frameEmbedNextSchema.safeParse(rawResponse);

// node_modules/@farcaster/frame-core/esm/schemas/notifications.js
var notificationDetailsSchema = z.object({
  url: z.string(),
  token: z.string()
});
var sendNotificationRequestSchema = z.object({
  notificationId: z.string().max(128),
  title: z.string().max(32),
  body: z.string().max(128),
  targetUrl: secureUrlSchema,
  tokens: z.string().array().max(100)
});
var sendNotificationResponseSchema = z.object({
  result: z.object({
    successfulTokens: z.array(z.string()),
    invalidTokens: z.array(z.string()),
    rateLimitedTokens: z.array(z.string())
  })
});

// node_modules/@farcaster/frame-core/esm/schemas/events.js
var eventFrameAddedSchema = z.object({
  event: z.literal("frame_added"),
  notificationDetails: notificationDetailsSchema.optional()
});
var eventFrameRemovedSchema = z.object({
  event: z.literal("frame_removed")
});
var eventNotificationsEnabledSchema = z.object({
  event: z.literal("notifications_enabled"),
  notificationDetails: notificationDetailsSchema.required()
});
var notificationsDisabledSchema = z.object({
  event: z.literal("notifications_disabled")
});
var serverEventSchema = z.discriminatedUnion("event", [
  eventFrameAddedSchema,
  eventFrameRemovedSchema,
  eventNotificationsEnabledSchema,
  notificationsDisabledSchema
]);

// node_modules/@farcaster/frame-core/esm/schemas/manifest.js
var primaryCategorySchema = z.enum([
  "games",
  "social",
  "finance",
  "utility",
  "productivity",
  "health-fitness",
  "news-media",
  "music",
  "shopping",
  "education",
  "developer-tools",
  "entertainment",
  "art-creativity"
]);
var domainFrameConfigSchema = z.object({
  // 0.0.0 and 0.0.1 are not technically part of the spec but kept for
  // backwards compatibilty. next should always resolve to the most recent
  // schema version.
  version: z.union([
    z.literal("0.0.0"),
    z.literal("0.0.1"),
    z.literal("1"),
    z.literal("next")
  ]),
  name: frameNameSchema,
  iconUrl: secureUrlSchema,
  homeUrl: secureUrlSchema,
  /** deprecated, set ogImageUrl instead */
  imageUrl: secureUrlSchema.optional(),
  /** deprecated, will rely on fc:frame meta tag */
  buttonTitle: buttonTitleSchema.optional(),
  splashImageUrl: secureUrlSchema.optional(),
  splashBackgroundColor: hexColorSchema.optional(),
  webhookUrl: secureUrlSchema.optional(),
  /** see: https://github.com/farcasterxyz/miniapps/discussions/191 */
  subtitle: createSimpleStringSchema({ max: 30 }).optional(),
  description: createSimpleStringSchema({ max: 170 }).optional(),
  screenshotUrls: z.array(secureUrlSchema).max(3).optional(),
  primaryCategory: primaryCategorySchema.optional(),
  tags: z.array(createSimpleStringSchema({ max: 20, noSpaces: true })).max(5).optional(),
  heroImageUrl: secureUrlSchema.optional(),
  tagline: createSimpleStringSchema({ max: 30 }).optional(),
  ogTitle: createSimpleStringSchema({ max: 30 }).optional(),
  ogDescription: createSimpleStringSchema({ max: 100 }).optional(),
  ogImageUrl: secureUrlSchema.optional(),
  /** see: https://github.com/farcasterxyz/miniapps/discussions/204 */
  noindex: z.boolean().optional()
});
var domainManifestSchema = z.object({
  accountAssociation: encodedJsonFarcasterSignatureSchema,
  frame: domainFrameConfigSchema.optional()
});

// node_modules/comlink/dist/esm/comlink.mjs
var proxyMarker = Symbol("Comlink.proxy");
var createEndpoint = Symbol("Comlink.endpoint");
var releaseProxy = Symbol("Comlink.releaseProxy");
var finalizer = Symbol("Comlink.finalizer");
var throwMarker = Symbol("Comlink.thrown");
var isObject = (val) => typeof val === "object" && val !== null || typeof val === "function";
var proxyTransferHandler = {
  canHandle: (val) => isObject(val) && val[proxyMarker],
  serialize(obj) {
    const { port1, port2 } = new MessageChannel();
    expose(obj, port1);
    return [port2, [port2]];
  },
  deserialize(port) {
    port.start();
    return wrap(port);
  }
};
var throwTransferHandler = {
  canHandle: (value) => isObject(value) && throwMarker in value,
  serialize({ value }) {
    let serialized;
    if (value instanceof Error) {
      serialized = {
        isError: true,
        value: {
          message: value.message,
          name: value.name,
          stack: value.stack
        }
      };
    } else {
      serialized = { isError: false, value };
    }
    return [serialized, []];
  },
  deserialize(serialized) {
    if (serialized.isError) {
      throw Object.assign(new Error(serialized.value.message), serialized.value);
    }
    throw serialized.value;
  }
};
var transferHandlers = /* @__PURE__ */ new Map([
  ["proxy", proxyTransferHandler],
  ["throw", throwTransferHandler]
]);
function isAllowedOrigin(allowedOrigins, origin) {
  for (const allowedOrigin of allowedOrigins) {
    if (origin === allowedOrigin || allowedOrigin === "*") {
      return true;
    }
    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {
      return true;
    }
  }
  return false;
}
function expose(obj, ep = globalThis, allowedOrigins = ["*"]) {
  ep.addEventListener("message", function callback(ev) {
    if (!ev || !ev.data) {
      return;
    }
    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {
      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);
      return;
    }
    const { id, type, path } = Object.assign({ path: [] }, ev.data);
    const argumentList = (ev.data.argumentList || []).map(fromWireValue);
    let returnValue;
    try {
      const parent = path.slice(0, -1).reduce((obj2, prop) => obj2[prop], obj);
      const rawValue = path.reduce((obj2, prop) => obj2[prop], obj);
      switch (type) {
        case "GET":
          {
            returnValue = rawValue;
          }
          break;
        case "SET":
          {
            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
            returnValue = true;
          }
          break;
        case "APPLY":
          {
            returnValue = rawValue.apply(parent, argumentList);
          }
          break;
        case "CONSTRUCT":
          {
            const value = new rawValue(...argumentList);
            returnValue = proxy(value);
          }
          break;
        case "ENDPOINT":
          {
            const { port1, port2 } = new MessageChannel();
            expose(obj, port2);
            returnValue = transfer(port1, [port1]);
          }
          break;
        case "RELEASE":
          {
            returnValue = void 0;
          }
          break;
        default:
          return;
      }
    } catch (value) {
      returnValue = { value, [throwMarker]: 0 };
    }
    Promise.resolve(returnValue).catch((value) => {
      return { value, [throwMarker]: 0 };
    }).then((returnValue2) => {
      const [wireValue, transferables] = toWireValue(returnValue2);
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
      if (type === "RELEASE") {
        ep.removeEventListener("message", callback);
        closeEndPoint(ep);
        if (finalizer in obj && typeof obj[finalizer] === "function") {
          obj[finalizer]();
        }
      }
    }).catch((error) => {
      const [wireValue, transferables] = toWireValue({
        value: new TypeError("Unserializable return value"),
        [throwMarker]: 0
      });
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
    });
  });
  if (ep.start) {
    ep.start();
  }
}
function isMessagePort(endpoint2) {
  return endpoint2.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint2) {
  if (isMessagePort(endpoint2))
    endpoint2.close();
}
function wrap(ep, target) {
  const pendingListeners = /* @__PURE__ */ new Map();
  ep.addEventListener("message", function handleMessage(ev) {
    const { data } = ev;
    if (!data || !data.id) {
      return;
    }
    const resolver = pendingListeners.get(data.id);
    if (!resolver) {
      return;
    }
    try {
      resolver(data);
    } finally {
      pendingListeners.delete(data.id);
    }
  });
  return createProxy(ep, pendingListeners, [], target);
}
function throwIfProxyReleased(isReleased) {
  if (isReleased) {
    throw new Error("Proxy has been released and is not useable");
  }
}
function releaseEndpoint(ep) {
  return requestResponseMessage(ep, /* @__PURE__ */ new Map(), {
    type: "RELEASE"
  }).then(() => {
    closeEndPoint(ep);
  });
}
var proxyCounter = /* @__PURE__ */ new WeakMap();
var proxyFinalizers = "FinalizationRegistry" in globalThis && new FinalizationRegistry((ep) => {
  const newCount = (proxyCounter.get(ep) || 0) - 1;
  proxyCounter.set(ep, newCount);
  if (newCount === 0) {
    releaseEndpoint(ep);
  }
});
function registerProxy(proxy2, ep) {
  const newCount = (proxyCounter.get(ep) || 0) + 1;
  proxyCounter.set(ep, newCount);
  if (proxyFinalizers) {
    proxyFinalizers.register(proxy2, ep, proxy2);
  }
}
function unregisterProxy(proxy2) {
  if (proxyFinalizers) {
    proxyFinalizers.unregister(proxy2);
  }
}
function createProxy(ep, pendingListeners, path = [], target = function() {
}) {
  let isProxyReleased = false;
  const proxy2 = new Proxy(target, {
    get(_target, prop) {
      throwIfProxyReleased(isProxyReleased);
      if (prop === releaseProxy) {
        return () => {
          unregisterProxy(proxy2);
          releaseEndpoint(ep);
          pendingListeners.clear();
          isProxyReleased = true;
        };
      }
      if (prop === "then") {
        if (path.length === 0) {
          return { then: () => proxy2 };
        }
        const r = requestResponseMessage(ep, pendingListeners, {
          type: "GET",
          path: path.map((p) => p.toString())
        }).then(fromWireValue);
        return r.then.bind(r);
      }
      return createProxy(ep, pendingListeners, [...path, prop]);
    },
    set(_target, prop, rawValue) {
      throwIfProxyReleased(isProxyReleased);
      const [value, transferables] = toWireValue(rawValue);
      return requestResponseMessage(ep, pendingListeners, {
        type: "SET",
        path: [...path, prop].map((p) => p.toString()),
        value
      }, transferables).then(fromWireValue);
    },
    apply(_target, _thisArg, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const last = path[path.length - 1];
      if (last === createEndpoint) {
        return requestResponseMessage(ep, pendingListeners, {
          type: "ENDPOINT"
        }).then(fromWireValue);
      }
      if (last === "bind") {
        return createProxy(ep, pendingListeners, path.slice(0, -1));
      }
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, pendingListeners, {
        type: "APPLY",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    },
    construct(_target, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, pendingListeners, {
        type: "CONSTRUCT",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    }
  });
  registerProxy(proxy2, ep);
  return proxy2;
}
function myFlat(arr) {
  return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
  const processed = argumentList.map(toWireValue);
  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
var transferCache = /* @__PURE__ */ new WeakMap();
function transfer(obj, transfers) {
  transferCache.set(obj, transfers);
  return obj;
}
function proxy(obj) {
  return Object.assign(obj, { [proxyMarker]: true });
}
function windowEndpoint(w, context = globalThis, targetOrigin = "*") {
  return {
    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),
    addEventListener: context.addEventListener.bind(context),
    removeEventListener: context.removeEventListener.bind(context)
  };
}
function toWireValue(value) {
  for (const [name, handler] of transferHandlers) {
    if (handler.canHandle(value)) {
      const [serializedValue, transferables] = handler.serialize(value);
      return [
        {
          type: "HANDLER",
          name,
          value: serializedValue
        },
        transferables
      ];
    }
  }
  return [
    {
      type: "RAW",
      value
    },
    transferCache.get(value) || []
  ];
}
function fromWireValue(value) {
  switch (value.type) {
    case "HANDLER":
      return transferHandlers.get(value.name).deserialize(value.value);
    case "RAW":
      return value.value;
  }
}
function requestResponseMessage(ep, pendingListeners, msg, transfers) {
  return new Promise((resolve) => {
    const id = generateUUID();
    pendingListeners.set(id, resolve);
    if (ep.start) {
      ep.start();
    }
    ep.postMessage(Object.assign({ id }, msg), transfers);
  });
}
function generateUUID() {
  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-");
}

// node_modules/@farcaster/frame-sdk/dist/endpoint.js
var mockEndpoint = {
  postMessage() {
  },
  addEventListener: () => {
  },
  removeEventListener: () => {
  }
};
var webViewEndpoint = {
  postMessage: (data) => {
    console.debug("[webview:req]", data);
    window.ReactNativeWebView.postMessage(JSON.stringify(data));
  },
  addEventListener: (_, listener, ...args) => {
    document.addEventListener("FarcasterFrameCallback", listener, ...args);
  },
  removeEventListener: (_, listener) => {
    document.removeEventListener("FarcasterFrameCallback", listener);
  }
};
var endpoint = (() => {
  if (typeof window === "undefined")
    return mockEndpoint;
  return (window == null ? void 0 : window.ReactNativeWebView) ? webViewEndpoint : windowEndpoint((window == null ? void 0 : window.parent) ?? window);
})();

// node_modules/@farcaster/frame-sdk/dist/frameHost.js
var frameHost = wrap(endpoint);

// node_modules/ox/_esm/core/version.js
var version = "0.1.1";

// node_modules/ox/_esm/core/internal/errors.js
function getVersion() {
  return version;
}

// node_modules/ox/_esm/core/Errors.js
var BaseError2 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x) => typeof x === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn) {
    return walk(this, fn);
  }
};
function walk(err, fn) {
  if (fn == null ? void 0 : fn(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn);
  return fn ? null : err;
}

// node_modules/ox/_esm/core/RpcResponse.js
function parse(response, options = {}) {
  const { raw = false } = options;
  const response_ = response;
  if (raw)
    return response;
  if (response_.error) {
    const { code } = response_.error;
    const JsonRpcError = (() => {
      if (code === InternalError.code)
        return InternalError;
      if (code === InvalidInputError.code)
        return InvalidInputError;
      if (code === InvalidParamsError.code)
        return InvalidParamsError;
      if (code === InvalidRequestError.code)
        return InvalidRequestError;
      if (code === LimitExceededError.code)
        return LimitExceededError;
      if (code === MethodNotFoundError.code)
        return MethodNotFoundError;
      if (code === MethodNotSupportedError.code)
        return MethodNotSupportedError;
      if (code === ParseError.code)
        return ParseError;
      if (code === ResourceNotFoundError.code)
        return ResourceNotFoundError;
      if (code === ResourceUnavailableError.code)
        return ResourceUnavailableError;
      if (code === TransactionRejectedError.code)
        return TransactionRejectedError;
      if (code === VersionNotSupportedError.code)
        return VersionNotSupportedError;
      return BaseError3;
    })();
    throw new JsonRpcError(response_.error);
  }
  return response_.result;
}
var BaseError3 = class extends Error {
  constructor(errorObject) {
    const { code, message, data } = errorObject;
    super(message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.BaseError"
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "data", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.code = code;
    this.data = data;
  }
};
var InvalidInputError = class _InvalidInputError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Missing or invalid parameters.",
      ...parameters,
      code: _InvalidInputError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32e3
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidInputError"
    });
  }
};
Object.defineProperty(InvalidInputError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32e3
});
var ResourceNotFoundError = class _ResourceNotFoundError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Requested resource not found.",
      ...parameters,
      code: _ResourceNotFoundError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32001
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ResourceNotFoundError"
    });
  }
};
Object.defineProperty(ResourceNotFoundError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32001
});
var ResourceUnavailableError = class _ResourceUnavailableError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Requested resource not available.",
      ...parameters,
      code: _ResourceUnavailableError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32002
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ResourceUnavailableError"
    });
  }
};
Object.defineProperty(ResourceUnavailableError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32002
});
var TransactionRejectedError = class _TransactionRejectedError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Transaction creation failed.",
      ...parameters,
      code: _TransactionRejectedError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32003
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.TransactionRejectedError"
    });
  }
};
Object.defineProperty(TransactionRejectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32003
});
var MethodNotSupportedError = class _MethodNotSupportedError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Method is not implemented.",
      ...parameters,
      code: _MethodNotSupportedError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32004
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.MethodNotSupportedError"
    });
  }
};
Object.defineProperty(MethodNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32004
});
var LimitExceededError = class _LimitExceededError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Rate limit exceeded.",
      ...parameters,
      code: _LimitExceededError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32005
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.LimitExceededError"
    });
  }
};
Object.defineProperty(LimitExceededError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32005
});
var VersionNotSupportedError = class _VersionNotSupportedError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "JSON-RPC version not supported.",
      ...parameters,
      code: _VersionNotSupportedError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32006
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.VersionNotSupportedError"
    });
  }
};
Object.defineProperty(VersionNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32006
});
var InvalidRequestError = class _InvalidRequestError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Input is not a valid JSON-RPC request.",
      ...parameters,
      code: _InvalidRequestError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32600
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidRequestError"
    });
  }
};
Object.defineProperty(InvalidRequestError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32600
});
var MethodNotFoundError = class _MethodNotFoundError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Method does not exist.",
      ...parameters,
      code: _MethodNotFoundError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32601
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.MethodNotFoundError"
    });
  }
};
Object.defineProperty(MethodNotFoundError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32601
});
var InvalidParamsError = class _InvalidParamsError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Invalid method parameters.",
      ...parameters,
      code: _InvalidParamsError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32602
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidParamsError"
    });
  }
};
Object.defineProperty(InvalidParamsError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32602
});
var InternalError = class _InternalError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Internal JSON-RPC error.",
      ...parameters,
      code: _InternalError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32603
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InternalErrorError"
    });
  }
};
Object.defineProperty(InternalError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32603
});
var ParseError = class _ParseError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      message: "Failed to parse JSON-RPC response.",
      ...parameters,
      code: _ParseError.code
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32700
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ParseError"
    });
  }
};
Object.defineProperty(ParseError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32700
});

// node_modules/ox/_esm/core/Provider.js
var ProviderRpcError = class extends Error {
  constructor(code, message) {
    super(message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "ProviderRpcError"
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.code = code;
    this.details = message;
  }
};
var UserRejectedRequestError = class extends ProviderRpcError {
  constructor({ message = "The user rejected the request." } = {}) {
    super(4001, message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UserRejectedRequestError"
    });
  }
};
Object.defineProperty(UserRejectedRequestError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4001
});
var UnauthorizedError = class extends ProviderRpcError {
  constructor({ message = "The requested method and/or account has not been authorized by the user." } = {}) {
    super(4100, message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnauthorizedError"
    });
  }
};
Object.defineProperty(UnauthorizedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4100
});
var UnsupportedMethodError = class extends ProviderRpcError {
  constructor({ message = "The provider does not support the requested method." } = {}) {
    super(4200, message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedMethodError"
    });
  }
};
Object.defineProperty(UnsupportedMethodError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4200
});
var DisconnectedError = class extends ProviderRpcError {
  constructor({ message = "The provider is disconnected from all chains." } = {}) {
    super(4900, message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.DisconnectedError"
    });
  }
};
Object.defineProperty(DisconnectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4900
});
var ChainDisconnectedError = class extends ProviderRpcError {
  constructor({ message = "The provider is not connected to the requested chain." } = {}) {
    super(4901, message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.ChainDisconnectedError"
    });
  }
};
Object.defineProperty(ChainDisconnectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4901
});
function createEmitter() {
  const emitter3 = new import_index.default();
  return {
    get eventNames() {
      return emitter3.eventNames.bind(emitter3);
    },
    get listenerCount() {
      return emitter3.listenerCount.bind(emitter3);
    },
    get listeners() {
      return emitter3.listeners.bind(emitter3);
    },
    addListener: emitter3.addListener.bind(emitter3),
    emit: emitter3.emit.bind(emitter3),
    off: emitter3.off.bind(emitter3),
    on: emitter3.on.bind(emitter3),
    once: emitter3.once.bind(emitter3),
    removeAllListeners: emitter3.removeAllListeners.bind(emitter3),
    removeListener: emitter3.removeListener.bind(emitter3)
  };
}
function from(provider2, options = {}) {
  var _a, _b;
  const { includeEvents = true } = options;
  if (!provider2)
    throw new IsUndefinedError();
  return {
    ...includeEvents ? {
      on: (_a = provider2.on) == null ? void 0 : _a.bind(provider2),
      removeListener: (_b = provider2.removeListener) == null ? void 0 : _b.bind(provider2)
    } : {},
    async request(args) {
      const result = await provider2.request(args);
      if (result && typeof result === "object" && "jsonrpc" in result)
        return parse(result);
      return result;
    }
  };
}
var IsUndefinedError = class extends BaseError2 {
  constructor() {
    super("`provider` is undefined.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.IsUndefinedError"
    });
  }
};

// node_modules/ox/_esm/core/RpcRequest.js
function createStore(options = {}) {
  let id = options.id ?? 0;
  return {
    prepare(options2) {
      return from2({
        id: id++,
        ...options2
      });
    },
    get id() {
      return id;
    }
  };
}
function from2(options) {
  return {
    ...options,
    jsonrpc: "2.0"
  };
}

// node_modules/@farcaster/frame-sdk/dist/provider.js
var emitter = createEmitter();
var store = createStore();
function toProviderRpcError({ code, details }) {
  switch (code) {
    case 4001:
      return new UserRejectedRequestError();
    case 4100:
      return new UnauthorizedError();
    case 4200:
      return new UnsupportedMethodError();
    case 4900:
      return new DisconnectedError();
    case 4901:
      return new ChainDisconnectedError();
    default:
      return new ProviderRpcError(code, details ?? "Unknown provider RPC error");
  }
}
var provider = from({
  ...emitter,
  async request(args) {
    const request = store.prepare(args);
    try {
      const response = await frameHost.ethProviderRequestV2(request).then((res) => parse(res, { request, raw: true }));
      if (response.error) {
        throw toProviderRpcError(response.error);
      }
      return response.result;
    } catch (e) {
      if (e instanceof Error && e.message.match(/cannot read property 'apply'/i)) {
        return await frameHost.ethProviderRequest(request);
      }
      if (e instanceof ProviderRpcError || e instanceof BaseError3) {
        throw e;
      }
      throw new InternalError({
        message: e instanceof Error ? e.message : void 0
      });
    }
  }
});
function announceProvider(detail) {
  const event = new CustomEvent("eip6963:announceProvider", { detail: Object.freeze(detail) });
  window.dispatchEvent(event);
  const handler = () => window.dispatchEvent(event);
  window.addEventListener("eip6963:requestProvider", handler);
  return () => window.removeEventListener("eip6963:requestProvider", handler);
}
if (typeof document !== "undefined") {
  document.addEventListener("eip6963:requestProvider", () => {
    frameHost.eip6963RequestProvider();
  });
  document.addEventListener("FarcasterFrameEthProviderEvent", (event) => {
    if (event instanceof MessageEvent) {
      const ethProviderEvent = event.data;
      emitter.emit(ethProviderEvent.event, ...ethProviderEvent.params);
    }
  });
  document.addEventListener("FarcasterFrameEvent", (event) => {
    if (event instanceof MessageEvent) {
      const frameEvent = event.data;
      if (frameEvent.event === "eip6963:announceProvider") {
        announceProvider({
          info: frameEvent.info,
          provider
        });
      }
    }
  });
}
if (typeof window !== "undefined") {
  window.addEventListener("eip6963:requestProvider", () => {
    frameHost.eip6963RequestProvider();
  });
  window.addEventListener("message", (event) => {
    if (event instanceof MessageEvent) {
      if (event.data.type === "frameEthProviderEvent") {
        const ethProviderEvent = event.data;
        emitter.emit(ethProviderEvent.event, ...ethProviderEvent.params);
      }
    }
  });
  window.addEventListener("message", (event) => {
    if (event instanceof MessageEvent) {
      if (event.data.type === "frameEvent") {
        const frameEvent = event.data.event;
        if (frameEvent.event === "eip6963:announceProvider") {
          announceProvider({
            info: frameEvent.info,
            provider
          });
        }
      }
    }
  });
}

// node_modules/@farcaster/frame-sdk/dist/sdk.js
function createEmitter2() {
  const emitter3 = new import_index.default();
  return {
    get eventNames() {
      return emitter3.eventNames.bind(emitter3);
    },
    get listenerCount() {
      return emitter3.listenerCount.bind(emitter3);
    },
    get listeners() {
      return emitter3.listeners.bind(emitter3);
    },
    addListener: emitter3.addListener.bind(emitter3),
    emit: emitter3.emit.bind(emitter3),
    off: emitter3.off.bind(emitter3),
    on: emitter3.on.bind(emitter3),
    once: emitter3.once.bind(emitter3),
    removeAllListeners: emitter3.removeAllListeners.bind(emitter3),
    removeListener: emitter3.removeListener.bind(emitter3)
  };
}
var emitter2 = createEmitter2();
var sdk = {
  ...emitter2,
  context: frameHost.context,
  actions: {
    setPrimaryButton: frameHost.setPrimaryButton.bind(frameHost),
    ready: frameHost.ready.bind(frameHost),
    close: frameHost.close.bind(frameHost),
    viewProfile: frameHost.viewProfile.bind(frameHost),
    viewToken: frameHost.viewToken.bind(frameHost),
    swap: frameHost.swap.bind(frameHost),
    signIn: async (options) => {
      const response = await frameHost.signIn(options);
      if (response.result) {
        return response.result;
      }
      if (response.error.type === "rejected_by_user") {
        throw new SignIn_exports.RejectedByUser();
      }
      throw new Error("Unreachable");
    },
    openUrl: (urlArg) => {
      const url = typeof urlArg === "string" ? urlArg : urlArg.url;
      return frameHost.openUrl(url.trim());
    },
    addFrame: async () => {
      const response = await frameHost.addFrame();
      if (response.result) {
        return response.result;
      }
      if (response.error.type === "invalid_domain_manifest") {
        throw new AddFrame_exports.InvalidDomainManifest();
      }
      if (response.error.type === "rejected_by_user") {
        throw new AddFrame_exports.RejectedByUser();
      }
      throw new Error("Unreachable");
    },
    composeCast(options = {}) {
      return frameHost.composeCast(options);
    }
  },
  wallet: {
    ethProvider: provider
  }
};
if (typeof document !== "undefined") {
  document.addEventListener("FarcasterFrameEvent", (event) => {
    if (event instanceof MessageEvent) {
      const frameEvent = event.data;
      if (frameEvent.event === "primary_button_clicked") {
        emitter2.emit("primaryButtonClicked");
      } else if (frameEvent.event === "frame_added") {
        emitter2.emit("frameAdded", {
          notificationDetails: frameEvent.notificationDetails
        });
      } else if (frameEvent.event === "frame_add_rejected") {
        emitter2.emit("frameAddRejected", { reason: frameEvent.reason });
      } else if (frameEvent.event === "frame_removed") {
        emitter2.emit("frameRemoved");
      } else if (frameEvent.event === "notifications_enabled") {
        emitter2.emit("notificationsEnabled", {
          notificationDetails: frameEvent.notificationDetails
        });
      } else if (frameEvent.event === "notifications_disabled") {
        emitter2.emit("notificationsDisabled");
      }
    }
  });
}
if (typeof window !== "undefined") {
  window.addEventListener("message", (event) => {
    if (event instanceof MessageEvent) {
      if (event.data.type === "frameEvent") {
        const frameEvent = event.data.event;
        if (frameEvent.event === "primary_button_clicked") {
          emitter2.emit("primaryButtonClicked");
        } else if (frameEvent.event === "frame_added") {
          emitter2.emit("frameAdded", {
            notificationDetails: frameEvent.notificationDetails
          });
        } else if (frameEvent.event === "frame_add_rejected") {
          emitter2.emit("frameAddRejected", { reason: frameEvent.reason });
        } else if (frameEvent.event === "frame_removed") {
          emitter2.emit("frameRemoved");
        } else if (frameEvent.event === "notifications_enabled") {
          emitter2.emit("notificationsEnabled", {
            notificationDetails: frameEvent.notificationDetails
          });
        } else if (frameEvent.event === "notifications_disabled") {
          emitter2.emit("notificationsDisabled");
        }
      }
    }
  });
}

// node_modules/@farcaster/frame-sdk/dist/index.js
var dist_default = sdk;

export {
  errors_exports,
  AddFrame_exports,
  ComposeCast_exports,
  DEFAULT_READY_OPTIONS,
  Ready_exports,
  SignIn_exports,
  Swap_exports,
  ViewProfile_exports,
  ViewToken_exports,
  ethereum_exports,
  context_exports,
  manifest_exports,
  createSimpleStringSchema,
  secureUrlSchema,
  frameNameSchema,
  buttonTitleSchema,
  caip19TokenSchema,
  hexColorSchema,
  aspectRatioSchema,
  encodedJsonFarcasterSignatureSchema,
  jsonFarcasterSignatureHeaderSchema,
  actionLaunchFrameSchema,
  actionViewTokenSchema,
  actionSchema,
  buttonSchema,
  frameEmbedNextSchema,
  safeParseFrameEmbed,
  notificationDetailsSchema,
  sendNotificationRequestSchema,
  sendNotificationResponseSchema,
  eventFrameAddedSchema,
  eventFrameRemovedSchema,
  eventNotificationsEnabledSchema,
  notificationsDisabledSchema,
  serverEventSchema,
  domainFrameConfigSchema,
  domainManifestSchema,
  createEmitter2 as createEmitter,
  sdk,
  dist_default
};
/*! Bundled license information:

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=chunk-7EXAWHE6.js.map
