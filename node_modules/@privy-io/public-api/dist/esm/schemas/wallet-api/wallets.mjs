import{z as t}from"zod";import{InvalidInputError as e,PrivyErrorCode as i}from"@privy-io/api-base";import{Pagination as a}from"../api.mjs";import{SolanaWalletAddress as r,WalletAddress as o}from"../core.mjs";import{BaseTransactionResponse as n}from"../transaction.mjs";import{PrivateKeyExportInput as s}from"./export.mjs";import"bs58";import"libphonenumber-js/max";import"viem";const l=t.enum(["secp256k1","ed25519"]),d=t.string().regex(/^[mM]'?(\/\d+'?)*$/),c=t.literal("ECDSA"),g=t.literal("EdDSA"),h=t.union([c,g]),p=t.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'"),m=t.custom((t=>"string"==typeof t&&t.startsWith("0x")));let _=t.object({address:r.optional(),chain_type:t.literal("solana").optional(),wallet_id:t.string().optional()}),u=t.object({address:o.optional(),chain_type:t.literal("ethereum").optional(),wallet_id:t.string().optional()});const b=t.enum(["root","manager","delegated-actions"]).nullable(),y=t.object({method:t.literal("signTransaction"),params:t.object({transaction:t.string(),encoding:t.literal("base64")}).strict()}).merge(_).strict(),j=t.object({method:t.literal("signAndSendTransaction"),caip2:p,params:t.object({transaction:t.string(),encoding:t.literal("base64")}).strict()}).merge(_).strict(),v=t.object({method:t.literal("signMessage"),params:t.object({message:t.string(),encoding:t.literal("base64")}).strict()}).merge(_).strict(),z=t.string().startsWith("0x").refine((t=>!t.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points");let x=t.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const f=t.union([z,x],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),k=t.object({from:o.optional(),to:o.optional(),chain_id:f.optional(),nonce:f.optional(),data:z.optional(),value:f.optional(),type:t.union([t.literal(0),t.literal(1),t.literal(2)]).optional(),gas_limit:f.optional(),gas_price:f.optional(),max_fee_per_gas:f.optional(),max_priority_fee_per_gas:f.optional()}).strict(),w=t.object({method:t.literal("eth_signTransaction"),params:t.object({transaction:k}).strict()}).merge(u).strict(),I=t.object({method:t.literal("eth_sendTransaction"),caip2:p,params:t.object({transaction:k}).strict()}).merge(u).strict(),D=t.object({message:t.string(),encoding:t.union([t.literal("utf-8"),t.literal("hex")])}).strict(),A=t.object({method:t.literal("personal_sign"),params:D}).merge(u).strict(),T=t.object({method:t.literal("secp256k1_sign"),params:t.object({hash:m}).strict()}).merge(u).strict(),P=t.object({params:t.object({hash:m}).strict()}).strict(),E=t.record(t.string(),t.any()),S=t.record(t.array(t.object({name:t.string(),type:t.string()}))).refine((t=>"EIP712Domain"in t),{message:"TypedDataTypesInputParams must contain an EIP712Domain key",path:["EIP712Domain"]}),U=t.object({method:t.literal("eth_signTypedData_v4"),params:t.object({typed_data:t.object({domain:E,types:S,message:t.record(t.string(),t.any()),primary_type:t.string()}).strict()}).strict()}).merge(u).strict(),W=t.object({address:t.string(),method:t.literal("exportPrivateKey"),params:s}).strict(),C=t.discriminatedUnion("method",[w,I,A,U,T]),M=t.discriminatedUnion("method",[y,j,v]),O=t.union([C,M,W]),q=t.object({method:t.literal("signTransaction"),data:t.object({signed_transaction:t.string(),encoding:t.literal("base64")})}),B=t.object({method:t.literal("signAndSendTransaction"),data:t.object({transaction_id:t.string().optional(),hash:t.string(),caip2:p}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),K=t.object({method:t.literal("signMessage"),data:t.object({signature:t.string(),encoding:t.literal("base64")})}),L=t.object({method:t.literal("eth_signTransaction"),data:t.object({signed_transaction:t.string(),encoding:t.literal("rlp")})}),N=t.object({method:t.literal("eth_sendTransaction"),data:t.object({transaction_id:t.string().optional(),hash:t.string(),caip2:p}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),V=t.object({method:t.literal("personal_sign"),data:t.object({signature:t.string(),encoding:t.literal("hex")})}),$=t.object({method:t.literal("secp256k1_sign"),data:t.object({signature:z,encoding:t.literal("hex")})}),R=t.object({method:t.literal("eth_signTypedData_v4"),data:t.object({signature:t.string(),encoding:t.literal("hex")})}),Z=t.object({method:t.literal("exportPrivateKey"),data:s}),F=t.object({data:t.object({signature:z,encoding:t.literal("hex")}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}).strict(),G=t.discriminatedUnion("method",[q,B,K,L,N,V,$,R,Z]),H=t.object({display_name:t.string().optional(),public_key:t.string(),role:b.optional()}),J=t.literal("cosmos"),Q=t.literal("stellar"),X=t.literal("sui"),Y=t.union([J,Q,X]),tt=t.union([t.literal("solana"),t.literal("ethereum")]),et=t.union([Y,tt]),it=t.object({id:t.string(),address:t.string(),public_key:t.string().optional(),created_at:t.number(),exported_at:t.number().nullable(),chain_type:et,policy_ids:t.array(t.string()),authorization_threshold:t.number().optional(),additional_signers:t.array(t.object({signer_id:t.string().cuid2(),override_policy_ids:t.array(t.string()).optional()})),owner_id:t.string().cuid2().nullable()}),at=t.string().cuid2(),rt=t.string(),ot=t.object({public_key:rt}).strict(),nt={owner:ot.nullable().optional(),owner_id:at.nullable().optional()},st=t.array(t.string().cuid2()).max(1,"Only one policy ID can be set").optional(),lt=t.array(t.object({signer_id:at,override_policy_ids:st}).strict()),dt=t.object({chain_type:et,policy_ids:st,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:lt.optional(),...nt}),ct=dt.refine((t=>{let e=void 0!==t.authorization_key_ids||void 0!==t.authorization_threshold,i=void 0!==t.additional_signers;return!e||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((t=>void 0===t.authorization_threshold||t.authorization_threshold>=1&&t.authorization_key_ids&&t.authorization_threshold<=t.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((t=>!t.owner||!t.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((t=>{throw new e(t.error.message,i.INVALID_DATA)})),gt=t.object({id:t.string(),chain_type:et,address:t.string(),authorization_threshold:t.number().optional()}),ht=t.object({wallet_id:t.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:t})=>{throw new e(t.message,i.INVALID_DATA)})),pt=t.enum(["usdc","eth"]),mt=t.enum(["ethereum","arbitrum","base","linea","optimism","zksync_era"]),_t=t.enum(["usd"]),ut=t.object({asset:t.union([pt,t.array(pt).max(10)]),chain:t.union([mt,t.array(mt).max(10)]),include_currency:_t.optional()}),bt=t.object({chain:mt,asset:pt,raw_value:t.string(),raw_value_decimals:t.number(),display_values:t.record(t.union([pt,_t]),t.string())}),yt=t.object({balances:t.array(bt.refine((t=>t.asset in t.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),jt=t.object({id:t.string()}),vt=t.object({id:t.string(),display_name:t.string().nullable(),public_key:t.string(),role:b,created_at:t.number()}),zt=t.object({id:t.string(),display_name:t.string().nullable(),public_key:t.string(),created_at:t.number()}),xt=a.extend({chain_type:et.optional()}).strict(),ft=t.object({policy_ids:st,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:lt.optional()}).strict().superRefine(((t,e)=>{Object.values(t).every((t=>null==t))&&e.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==t.authorization_threshold&&0!==t.authorization_threshold&&(t.authorization_threshold<0&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===t.authorization_key_ids&&e.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),t.authorization_key_ids&&t.authorization_threshold>t.authorization_key_ids.length&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),kt=t.object({chain_type:et,policy_ids:st,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:lt.optional(),...nt}).strict(),wt=a.extend({wallet_id:t.string(),chain:t.literal("base"),asset:t.union([pt,t.array(pt).max(2)])}).strict(),It=t.object({type:t.literal("transfer_sent"),sender:t.string(),recipient:t.string()}).strict().merge(bt),Dt=t.object({type:t.literal("transfer_received"),sender:t.string(),recipient:t.string()}).strict().merge(bt),At=t.discriminatedUnion("type",[It,Dt]),Tt=n.extend({details:At.nullable()}),Pt=Tt.extend({privy_transaction_id:t.string(),wallet_id:t.string()}),Et=t.object({transactions:t.array(Pt),next_cursor:t.string().nullable()});export{lt as AdditionalSignerInput,pt as Asset,bt as AssetAmountDetails,vt as AuthorizationKeyDashboardResponse,zt as AuthorizationKeyResponse,b as AuthorizationKeyRole,_t as BalanceFiatCurrency,dt as BaseWalletApiCreateInput,kt as BaseWalletApiCreateStrictInput,p as CAIP2,mt as ChainNameInput,et as ChainType,J as Cosmos,Y as CurveSigningChainTypes,l as CurveType,c as ECDSA,g as EdDSA,tt as FirstClassChainTypes,d as HDPath,m as Hash,z as Hex,at as KeyQuorumId,ot as OwnerInput,nt as OwnerInputFields,rt as P256PublicKey,st as PolicyInput,Pt as PrivyTransactionResponseWithDetails,f as Quantity,h as SigningAlgorithm,Q as Stellar,X as Sui,At as TransactionDetail,Tt as TransactionResponseWithDetails,Dt as TransferReceivedTransactionDetail,It as TransferSentTransactionDetail,E as TypedDataDomainInputParams,S as TypedDataTypesInputParams,k as UnsignedEthereumTransaction,ct as WalletApiCreateInput,gt as WalletApiCreateResponse,A as WalletApiEthereumPersonalSignRpcInput,D as WalletApiEthereumPersonalSignRpcInputParams,V as WalletApiEthereumPersonalSignRpcResponse,C as WalletApiEthereumRpcInput,T as WalletApiEthereumSecp256k1SignRpcInput,$ as WalletApiEthereumSecp256k1SignRpcResponse,I as WalletApiEthereumSendTransactionRpcInput,N as WalletApiEthereumSendTransactionRpcResponse,w as WalletApiEthereumSignTransactionRpcInput,L as WalletApiEthereumSignTransactionRpcResponse,U as WalletApiEthereumSignTypedDataRpcInput,R as WalletApiEthereumSignTypedDataRpcResponse,W as WalletApiExportPrivateKeyRpcInput,Z as WalletApiExportPrivateKeyRpcResponse,P as WalletApiRawSignInput,F as WalletApiRawSignResponse,H as WalletApiRegisterAuthorizationKeyInput,jt as WalletApiRevokeAuthorizationKeyInput,O as WalletApiRpcInput,G as WalletApiRpcResponse,M as WalletApiSolanaRpcInput,j as WalletApiSolanaSignAndSendTransactionRpcInput,B as WalletApiSolanaSignAndSendTransactionRpcResponse,v as WalletApiSolanaSignMessageRpcInput,K as WalletApiSolanaSignMessageRpcResponse,y as WalletApiSolanaSignTransactionRpcInput,q as WalletApiSolanaSignTransactionRpcResponse,ut as WalletGetBalanceInput,yt as WalletGetBalanceResponse,wt as WalletGetTransactionsInput,Et as WalletGetTransactionsResponse,ht as WalletIdFromPath,it as WalletResponse,ft as WalletUpdateInput,xt as WalletsSearchInput};
